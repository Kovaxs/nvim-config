return {
    -- {
    --     "neovim/nvim-lspconfig",
    --     dependencies = { 'saghen/blink.cmp',
    --         {
    --             "folke/lazydev.nvim",
    --             opts =
    --             {
    --                 library =
    --                 {
    --                     {
    --                         path = "${3rd}/luv/library",
    --                         words = { "vim%.uv" }
    --                     },
    --                 },
    --             },
    --         },
    --     },
    --     config = function()
    --         local capabilities = require('blink.cmp').get_lsp_capabilities()
    --         --signs redefining
    --         local signs = { Error = " ", Warn = " ", Hint = "󰠠 ", Info = " " }
    --         for type, icon in pairs(signs) do
    --             local hl = "DiagnosticSign" .. type
    --             vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
    --         end
    --
    --         --on_attach
    --         local on_attach = function(client, bufnr)
    --             client.server_capabilities.semanticTokensProvider = nil
    --             if client.name == "ruff" then
    --                 -- Disable hover in favor of Pyright
    --                 client.server_capabilities.hoverProvider = false
    --             end
    --         end
    --
    --         --
    --         require("lspconfig").ruff.setup({
    --             on_attach = function(client, bufnr)
    --                 client.server_capabilities.hoverProvider = false
    --                 on_attach(client, bufnr)
    --             end,
    --         })
    --
    --         --
    --         require("lspconfig").pyright.setup({
    --             capabilites = capabilities,
    --             settings = {
    --                 python = {
    --                     analysis = {
    --                         typeCheckingMode = "basic",
    --                         autoSearchPaths = true,
    --                         useLibraryCodeForTypes = true,
    --                     },
    --                 }
    --             }
    --         })
    --
    --         --
    --         require("lspconfig").lua_ls.setup { capabilities = capabilities }
    --
    --         --
    --         vim.api.nvim_create_autocmd('LspAttach',
    --             {
    --                 callback = function(args)
    --                     local c = vim.lsp.get_client_by_id(args.data.client_id)
    --                     if not c then return end
    --                     if vim.bo.filetype == "lua" then
    --                         -- Format the current buffer on save
    --                         vim.api.nvim_create_autocmd('BufWritePre', {
    --                             buffer = args.buf,
    --                             callback = function()
    --                                 vim.lsp.buf.format({ bufnr = args.buf, id = c.id })
    --                             end,
    --                         })
    --                     end
    --                     if vim.bo.filetype == "python" then
    --                         -- Format the current buffer on save
    --                         vim.api.nvim_create_autocmd('BufWritePre', {
    --                             buffer = args.buf,
    --                             callback = function()
    --                                 vim.lsp.buf.format({ bufnr = args.buf, id = c.id })
    --                             end,
    --                         })
    --                     end
    --                 end,
    --             })
    --     end,
    -- }
}
